{"version":3,"sources":["/source/d3_renderers.coffee"],"names":[],"mappings":"CAAA,WAAA,GAAA,IAAA,EAAiB,SAAC,GACd,MAAqB,gBAAlB,UAAgD,gBAAjB,QAC9B,EAAY,QAAQ,WACC,kBAAjB,SAAgC,OAAO,IAC3C,QAAQ,UAAW,GAGnB,EAAY,UAEL,SAAC,SAEZ,GAAE,eAAe,cAAe,QAAS,SAAC,EAAW,GACjD,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAyBA,KAzBA,GACI,iBACA,IACI,MAAO,iBAAG,GAAE,QAAQ,QAAU,KAC9B,OAAQ,iBAAG,GAAE,QAAQ,SAAW,OAExC,EAAO,EAAE,OAAO,EAAU,GAG1B,EAAS,EAAE,SAAS,KAAI,MAAO,OAAQ,OAAQ,SAE/C,GAAO,KAAM,MAAO,aACpB,EAAY,SAAC,EAAM,EAAM,GACrB,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,CAAA,IAAkB,IAAf,EAAK,OAEJ,YADA,EAAK,MAAQ,EAIjB,wBAFA,EAAK,aACL,EAAI,EAAK,QACT,EAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,cAAgC,EAAM,OAAQ,EAE1C,WADA,GAAU,EAAO,EAAM,SAE3B,IAAW,KAAM,GACjB,EAAU,EAAU,EAAM,GAC1B,EAAK,SAAS,KAAK,IAEvB,EAAA,EAAA,aAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WACI,EAAQ,EAAU,cAAc,MAAY,QACzC,MAAA,GACC,EAAU,EAAM,EAAQ,EA6BhC,OA3BA,GAAQ,GAAG,MAAM,aACjB,EAAQ,EAAK,GAAG,QAChB,EAAS,EAAK,GAAG,SAEjB,EAAU,GAAG,OAAO,UACf,MAAM,EAAO,IACb,QAAO,GACP,MAAO,SAAC,SAAM,GAAE,OAErB,GAAG,OAAO,EAAO,IACZ,OAAO,OACH,MAAM,WAAY,YAClB,MAAM,QAAS,EAAQ,MACvB,MAAM,SAAU,EAAS,MAC7B,MAAM,GAAM,UAAU,SAClB,KAAK,EAAQ,SAAS,GAAG,EAAE,EAAE,IAAI,MAAO,SAAC,SAAM,GAAE,QAAQ,OAC7D,QAAQ,OAAO,OACf,KAAK,QAAS,QACd,MAAM,aAAc,SAAC,GAAM,MAAG,OAAA,EAAA,SAAiB,YAAiB,EAAM,EAAE,QACxE,KAAM,SAAC,SAAM,GAAE,OACf,KAAK,WACE,KAAK,MAAM,OAAS,SAAC,SAAM,GAAE,EAAE,OAC1B,MAAM,MAAS,SAAC,SAAM,GAAE,EAAE,OAC1B,MAAM,QAAS,SAAC,SAAM,MAAK,IAAI,EAAG,EAAE,GAAK,GAAG,OAC5C,MAAM,SAAS,SAAC,SAAM,MAAK,IAAI,EAAG,EAAE,GAAK,GAAG,SAGtD","file":"d3_renderers.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n        \ncallWithJQuery ($) ->\n\n    $.pivotUtilities.d3_renderers = Treemap: (pivotData, opts) ->\n        defaults =\n            localeStrings: {}\n            d3:\n                width: -> $(window).width() / 1.4\n                height: -> $(window).height() / 1.4\n\n        opts = $.extend defaults, opts\n\n\n        result = $(\"<div>\").css(width: \"100%\", height: \"100%\")\n\n        tree = name: \"All\", children: []\n        addToTree = (tree, path, value) ->\n            if path.length == 0\n                tree.value = value\n                return\n            tree.children ?= []\n            x = path.shift()\n            for child in tree.children when child.name == x\n                addToTree(child, path, value)\n                return\n            newChild = name: x\n            addToTree(newChild, path, value)\n            tree.children.push newChild\n\n        for rowKey in pivotData.getRowKeys()\n            value = pivotData.getAggregator(rowKey, []).value()\n            if value?\n                addToTree(tree, rowKey, value)\n\n        color = d3.scale.category10()\n        width = opts.d3.width()\n        height = opts.d3.height()\n\n        treemap = d3.layout.treemap()\n            .size([width, height])\n            .sticky(true)\n            .value( (d) -> d.size )\n\n        d3.select(result[0])\n            .append(\"div\")\n                .style(\"position\", \"relative\")\n                .style(\"width\", width + \"px\")\n                .style(\"height\", height + \"px\")\n            .datum(tree).selectAll(\".node\")\n                .data(treemap.padding([15,0,0,0]).value( (d) -> d.value ).nodes)\n            .enter().append(\"div\")\n            .attr(\"class\", \"node\")\n            .style(\"background\", (d) -> if d.children? then \"lightgrey\" else color(d.name) )\n            .text( (d) -> d.name )\n            .call ->\n                    this.style(\"left\",  (d) -> d.x+\"px\" )\n                        .style(\"top\",   (d) -> d.y+\"px\" )\n                        .style(\"width\", (d) -> Math.max(0, d.dx - 1)+\"px\" )\n                        .style(\"height\",(d) -> Math.max(0, d.dy - 1)+\"px\" )\n                    return\n        \n        return result\n    \n\n\n"],"sourceRoot":"/source/"}